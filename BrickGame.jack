/**
 * Represents a Brick game,  base on pong game from the expamles
 */
class BrickGame {

    static BrickGame instance;     
    field Paddle paddle;  
    field Array bricks; 
    field Ball ball;    
    field Bonus bonus;

    field int wall; 
    field int lastWall; 
    field int PaddleWidth;        

    field int numBricks;      
    field int score;         
    field boolean exit; 
    field boolean win;

    field Random random;

    constructor BrickGame new() {
        var int i;
        var int j;

	    do Screen.clearScreen();
        let PaddleWidth = 50;  // initial Paddle size

        let paddle = Paddle.new(230, 229, PaddleWidth, 7, 0, 511);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);

        let random = Random.new(8);
        let bonus = Bonus.new(250, 125, random.randRange(2));
        let numBricks = 48;
        let bricks = Array.new(48);
        
        let j = 0;
        while (j < 3){
            let i = 0;
            while (i < 16){
                let bricks[i + (j*16)] = Brick.new((i*32), 10 + (j * 20));
                let i = i + 1;
            }
            let j = j + 1;
        }

        do ball.setDestination(400,0);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
	
	    let exit = false;
        let win = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    method void dispose() {
        do paddle.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function void newInstance() {
        let instance = BrickGame.new();
        return;
    }
     
    function BrickGame getInstance() {
        return instance;
    }

    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                
                do moveBall();
                do moveBonus();
                do paddle.move();
                do Sys.wait(50);
            }

            if (key = 130) { do paddle.setDirection(1); }
	        else {
	            if (key = 132) { do paddle.setDirection(2); }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                
                do moveBall();
                do moveBonus();
                do paddle.move();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
            if(~win){
	            do Output.printString("Game Over");}
            else{
	            do Output.printString("You Win!");}
	    }
            
        return;
    }

    method void moveBonus(){

        var int bonusR, bonusL, PaddleLeft, PaddleRight, yBonus;
        var boolean grow;

        if (bonus=0){
            return;
        }

        let bonusR = bonus.getRight();
        let bonusL = bonus.getLeft();
        let yBonus = bonus.getY();

        let PaddleLeft = paddle.getLeft();
        let PaddleRight = paddle.getRight();

        do bonus.move();

        if (yBonus > 225){
            if (((PaddleLeft - 1) < bonusL) & ((PaddleRight + 1) > bonusR)){
                let grow = bonus.isGrow();
                do paddle.activateBonus(grow);
            }
            do bonus.dispose();
            let bonus = 0;
        }

        return;
    }

    // help func to avoid devsion by zero
    method int floor(int num){
        if (num = 0){
            return 1;
        }
        return num;
    }

    method brick calculateColision(){

        var boolean hasCollision;
        var Brick brick;
        var int i;
        
        let brick = 0;
        let i = 0;

        while (i < 48){
            if (~(bricks[i] = 0)){
                let brick = bricks[i];
                let hasCollision =  brick.hasCollision(ball.getLeft(), ball.getY(), ball.getSize());
                }
            if (hasCollision){

                if(bonus=0){
                    let bonus = Bonus.new(ball.getLeft(), ball.getY(), random.randRange(2));
                    }

                do brick.dispose();
                let bricks[i] = 0;
                let numBricks = numBricks - 1;

                // update score
                let score = score + 1;
                
                if(score = 48){
                    let win = true;
                    let exit = true;
                }
                do Output.moveCursor(22,7);
                do Output.printInt(score);

                return brick;
            }
            let i = i + 1;
        }
        
        return 0;
    }

    method void moveBall() {
        var int bouncingDirection, PaddleLeft, PaddleRight, ballLeft, ballRight;
        var int divLengthx, divLengthy, newx, newy, factor;
        var Brick brick;


        if (numBricks < 1){
            let exit = true;
        }
        let wall = ball.move();
        let brick = calculateColision();
        if (~(brick=0)){

            let divLengthx = floor(ball.getLengthx() / 10);
            let divLengthy = floor(ball.getLengthy()  / 10);

            if (ball.getInvert()){
                let bouncingDirection = -1;
            }
            else{
                let bouncingDirection = 1;
            }

            let newy = brick.getLeft();
            let newx = (divLengthy * (20)) / divLengthx;

            if (ball.getInvert()){
                let factor = -3;
            }
            else{
                let factor = 3;
            }
            let lastWall = 0;                    
            let wall = 0;
            do ball.setWall(0);

            let newx = ball.getLeft() + (newx * factor);
            do ball.setDestination(newx, newy);
        }
        
        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let PaddleLeft = paddle.getLeft();
            let PaddleRight = paddle.getRight();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
  
            if (wall = 4) {
                let exit = (PaddleLeft > ballRight) | (PaddleRight < ballLeft);
                if (~exit) {
                    if (ballRight < (PaddleLeft + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (PaddleRight - 10)) { let bouncingDirection = 1; }
                    }
                }
            }
            do ball.bounce(bouncingDirection);
        }
        return;
    }
}