// base on pong game from the expamles
class Paddle {

    field int x, y;          
    field int width, height, leftWall, rightWall, rightWallLesPaddle;
    field int direction;      // direction of the paddle's movement (1 = left, 2 = right)

    /** Constructs a new paddle with the given location and width. */
    constructor Paddle new(int Ax, int Ay, int Awidth, int Aheight, int AleftWall, int ArightWall) {
        let x = Ax;
        let y = Ay;
        let width = Awidth;
        let height = Aheight;

        let leftWall = AleftWall;
	    let rightWall = ArightWall;
        let rightWallLesPaddle = rightWall - width;

        let direction = 2;
        do show();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the paddle. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the paddle. */
    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    method int drawHelpr(){
        if ((x + width) > rightWallLesPaddle){
            return rightWallLesPaddle;
        }
        return x + width;
    }
    /** Draws the paddle. */
    method void draw() {
        do Screen.drawRectangle(x, y, drawHelpr(), y + height);
        return;
    }

    /** Sets the paddle's direction (0=stop, 1=left, 2=right). */
    method void setDirection(int Adirection) {
        let direction = Adirection;
        return;
    }

    /** Returns the paddle's left edge. */
    method int getLeft() {
        return x;
    }

    /** Returns the paddle's right edge. */
    method int getRight() {
        return x + width;
    }

    /** Sets the paddle's width. */
    method void setWidth(int Awidth) {
        do hide();
        let width = Awidth;
        do show();
        return;
    }

    /** Moves the paddle one step in the paddle's direction. */
    method void move() {
	    if (direction = 1) {
            let x = x - 4;
            if (x < 0) { let x = 0; }
            do Screen.setColor(false);
            do Screen.drawRectangle((x + width) + 1, y, (x + width) + 4, y + height);
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 3, y + height);
        }
        else {
            let x = x + 4;
            if ((x + width) > 511) { let x = 511 - width; }
            do Screen.setColor(false);
            do Screen.drawRectangle(x - 4, y, x - 1, y + height);
            do Screen.setColor(true);
            do Screen.drawRectangle((x + width) - 3, y, x + width, y + height);
        }
        return;
    }


    method void activateBonus(boolean grow){
        if (grow){
            do setWidth(width + 30);
        }

        else{
            do setWidth(width - 30);
        }
        let rightWallLesPaddle = rightWall - width;

        return;
    }
}
